
#define DELAY 16000000
#define SYSCTL_RCGCGPIO_R (*((volatile unsigned long *)0x400FE608))
#define GPIO_PORTF_DATA_R (*((volatile unsigned long *)0x400253FC))
#define GPIO_PORTF_DIR_R (*((volatile unsigned long *)0x40025400))
#define GPIO_PORTF_DEN_R (*((volatile unsigned long *)0x4002551C))

void GPIOF_Handler(void);
void BLUELIGHT(int Nseconds);

#include "TM4C123.h" 
int main(void)
{
	
SYSCTL_RCGCGPIO_R = 0x20;

/* PORTF0 has special function, need to unlock to modify */
GPIOF->LOCK = 0x4C4F434B; /* unlock commit register */
GPIOF->CR = 0x01; /* make PORTF0 configurable */
GPIOF->LOCK = 0; /* lock commit register */
/*Initialize PF3 as a digital output, PF0 and PF4 as digital input pins */
GPIOF->DIR &= (1<<4)|(1<<0); /* Set PF4 as a digital input pins */

GPIOF->DIR |= (1<<2); /* Set PF2 as digital output to control blue LED */
GPIOF->DEN |= (1<<4)|(1<<0)|(1<<2) ; /* make PORTF4-0 digital pins */
GPIOF->PUR |= (1<<4)|(1<<0); /* enable pull up for PORTF4, 0 */

/* configure PORTF4, 0 for falling edge trigger interrupt */
GPIOF->IS &= (1<<4)|(1<<0); /* make bit 4, 0 edge sensitive */
GPIOF->IBE &=(1<<4)|(1<<0); /* trigger is controlled by IEV */
GPIOF->IEV |= (1<<4)|(1<<0); /* rising edge trigger */
GPIOF->ICR |= (1<<4)|(1<<0); /* clear any prior interrupt */
GPIOF->IM |= (1<<4)|(1<<0); /* unmask interrupt */

/* enable interrupt in NVIC and set priority to 3 */
NVIC->IP[30] = 3 << 5; /* set interrupt priority to 3 */
NVIC->ISER[0] |= (1<<30); /* enable IRQ30 (D30 of ISER[0]) */

  while(1)
  {
  }

}


void GPIOF_Handler(void)
{
int Nseconds =5 ;
SYSCTL->RCGCGPIO |= (1<<5); /* Set bit5 of RCGCGPIO to enable clock to PORTF*/

if (GPIOF->MIS & 0x01) /* check if interrupt causes by PF0 (riight)/SW1*/
  {
    while(1)
    {
    BLUELIGHT(Nseconds);
      
        if (GPIOF->MIS & 0x10) /*left switch*/
        {
          if(Nseconds == 5)
          {
            Nseconds=2;
          }
          else
          {
            Nseconds=5;
          }
          GPIOF->ICR |= 0x10;
        }
     GPIOF->ICR |= 0x01;
     }
        
  }
}


void BLUELIGHT(int Nseconds)
{
  int temp;
  volatile unsigned long ulLoop ;
  
  GPIOF->DATA |= (1<<2);
      for(temp=0;temp<Nseconds;temp++)
      {
        for ( ulLoop = 0; ulLoop < DELAY; ulLoop++)
        {
          if (GPIOF->MIS & 0x01) /*right switch*/
          {
          Nseconds=5;
          
          GPIOF_Handler();
          
          }
        }
      }

  GPIOF->DATA &= ~(1<<2);
       
}
